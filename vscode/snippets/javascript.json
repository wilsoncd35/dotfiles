{
  "simple logger": {
    "prefix": "simplelogger",
    "description": "Simple logger. Avoid using console directly.",
    "body": [
      "/** Simple logger. */",
      "/* istanbul ignore next: Unnecessary. */",
      "if (!global.log) global.log = console;",
      "$0"
    ]
  },
  "it dummy": {
    "prefix": "itdummy",
    "description": "Dummy it.",
    "body": [
      "it('dummy', function() {",
      "  expect(true).to.equal(true);",
      "});$0"
    ]
  },
  "main module": {
    "prefix": "mainModule",
    "description": "Execute this module directory or export.",
    "body": [
      "if (typeof require !== 'undefined' && require.main === module) {",
      "  // When a script.",
      "  log.debug(JSON.stringify(config, null, 2));",
      "} else {",
      "  // When a module.",
      "  module.exports = config;",
      "}"
    ]
  },
  "doc c charlie": {
    "prefix": "doc c",
    "body": [
      "/**",
      " * @file $1.",
      " * @license proprietary",
      " * @copyright © Charlie Wilson. All rights reserved.",
      " * @module",
      " */"
    ],
    "description": "Insert copyright Charlie in JSDoc."
  },
  "doc i itential": {
    "prefix": "doc i",
    "body": [
      "/**",
      " * @file $1.",
      " * @license proprietary",
      " * @copyright © Itential, Inc. All rights reserved.",
      " * @module",
      " */"
    ],
    "description": "Insert copyright Itential in JSDoc."
  },
  "console.log response": {
    "prefix": "conr",
    "body": [
      "console.log(`[response]>>>${JSON.stringify(this.response, null, 2)}`);"
    ],
    "description": "Log test response to console. Useful for quick test."
  },
  "console.log callback": {
    "prefix": "conc",
    "body": [
      "console.log(`[error]>>>${JSON.stringify(error)}`);",
      "console.log(`[response]>>>${JSON.stringify(response)}`);",
      "console.log(`[text]>>>${JSON.stringify(JSON.parse(response.text))}`);"
    ],
    "description": "Log output to console. Useful for quick test."
  },
  "console.log misc": {
    "prefix": "conm",
    "body": ["console.log(`[$1]>>>${JSON.stringify($1, null, 1)}`);"],
    "description": "Log output to console. Useful for quick test."
  },
  "console.log": {
    "prefix": "cl",
    "body": ["console.log($1);$0"],
    "description": "Basic console.log() statement."
  },
  "mocha describe": {
    "prefix": "desc",
    "body": ["describe('$1', function () {", "  $0", "});"],
    "description": "mocha describe"
  },
  "mocha it http status code": {
    "prefix": "it http status code",
    "body": [
      "it('HTTP $1 status code.', async function () {",
      "  expect(this.response).to.have.status($1);",
      "});",
      "$0"
    ]
  },
  "mocha it": {
    "prefix": "it",
    "body": ["it('$1', async function () {", "  $0", "});"],
    "description": "mocha it"
  },
  "mocha it payload": {
    "prefix": "itpayload",
    "body": [
      "it('payload.', async function () {",
      "  expect(requestResponse).to.exist;",
      "  // Capture payload for reporting (report/index.json).",
      "  addContext(this, {",
      "    title: 'response',",
      "    value: JSON.stringify(requestResponse),",
      "  });",
      "  addContext(this, {",
      "    title: 'text',",
      "    value: JSON.parse(requestResponse.text),",
      "  });",
      "});"
    ]
  },
  "mocha after payload": {
    "prefix": "afterpayload",
    "body": [
      "after('payload.', async function () {",
      "  expect(requestResponse).to.exist;",
      "  // Capture payload for reporting (report/index.json).",
      "  addContext(this, {",
      "    title: 'response',",
      "    value: JSON.stringify(requestResponse),",
      "  });",
      "  addContext(this, {",
      "    title: 'text',",
      "    value: JSON.parse(requestResponse.text),",
      "  });",
      "});"
    ]
  },
  "mocha beforeEach": {
    "prefix": "beforee",
    "body": ["beforeEach(async function () {", "  $0", "});"],
    "description": "mocha beforeEach"
  },
  "mocha before": {
    "prefix": "before",
    "body": ["before(async function () {", "  $0", "});"],
    "description": "mocha before"
  },
  "mocha afterEach": {
    "prefix": "aftere",
    "body": ["afterEach(async function () {", "  $0", "});"],
    "description": "mocha afterEach"
  },
  "mocha after": {
    "prefix": "after",
    "body": ["after(async function () {", "  $0", "});"],
    "description": "mocha after"
  },
  "chai expect": {
    "prefix": "ea",
    "body": ["expect($1).to.equal($2);"]
  },
  "eslint rule": {
    "prefix": "eslr",
    "body": ["'$1': 'warn',"]
  },
  "require chai": {
    "prefix": "reqchai",
    "body": ["const chai = require('chai');"]
  },
  "require expect": {
    "prefix": "reqexpect",
    "body": ["const { expect } = chai;"]
  },
  "require testdouble": {
    "prefix": "reqtestdouble",
    "body": ["const td = require('testdouble');"]
  },
  "require chai-http": {
    "prefix": "reqchai-http",
    "body": ["const chaiHttp = require('chai-http');"]
  },
  "lint rule template": {
    "prefix": "lrw",
    "body": ["'$1': 'warn',", "$0"]
  }
}
